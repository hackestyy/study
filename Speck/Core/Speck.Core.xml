<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>Speck.Core</name>
  </assembly>
  <members>
    <member name="N:Speck.Core">
    </member>
    <member name="T:Speck.Core.Task">
    </member>
    <member name="E:Speck.Core.Task.BehaviorAdded">
      <summary>
Occurs when .</summary>
    </member>
    <member name="E:Speck.Core.Task.BehaviorRemoved">
      <summary>
Occurs when .</summary>
    </member>
    <member name="M:Speck.Core.Task.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Speck.Core.Task">Task</see> class.</summary>
    </member>
    <member name="M:Speck.Core.Task.Abort">
    </member>
    <member name="E:Speck.Core.Task.Aborted">
      <summary>
Occurs when .</summary>
    </member>
    <member name="E:Speck.Core.Task.BeforeStart">
      <summary>
Occurs when .</summary>
    </member>
    <member name="M:Speck.Core.Task.Close">
    </member>
    <member name="E:Speck.Core.Task.Closed">
      <summary>
Occurs when .</summary>
    </member>
    <member name="M:Speck.Core.Task.EnterPauseState">
    </member>
    <member name="M:Speck.Core.Task.OnAborted">
    </member>
    <member name="M:Speck.Core.Task.OnBehaviorAdded(Speck.Core.Behavior)">
      <param name="addedBehavior">
</param>
    </member>
    <member name="M:Speck.Core.Task.OnBehaviorRemoved(Speck.Core.Behavior)">
      <param name="removedBehavior">
</param>
    </member>
    <member name="M:Speck.Core.Task.OnBeforeStart">
    </member>
    <member name="M:Speck.Core.Task.OnClosed">
    </member>
    <member name="M:Speck.Core.Task.OnPaused">
    </member>
    <member name="M:Speck.Core.Task.OnResumed">
    </member>
    <member name="M:Speck.Core.Task.Pause">
    </member>
    <member name="M:Speck.Core.Task.GuardWork4Pause">
    </member>
    <member name="E:Speck.Core.Task.Paused">
      <summary>
Occurs when .</summary>
    </member>
    <member name="M:Speck.Core.Task.Resume">
      <summary>
Resumes this task. If any behavior belong to it is resumed, we say the task was resumed</summary>
    </member>
    <member name="M:Speck.Core.Task.GuardWork4Resume">
    </member>
    <member name="E:Speck.Core.Task.Resumed">
      <summary>
Occurs when .</summary>
    </member>
    <member name="M:Speck.Core.Task.Start">
    </member>
    <member name="M:Speck.Core.Task.Add(Speck.Core.Component)">
      <param name="component">
</param>
    </member>
    <member name="M:Speck.Core.Task.DoWork">
    </member>
    <member name="M:Speck.Core.Task.Initialize">
    </member>
    <member name="M:Speck.Core.Task.Remove(Speck.Core.Component)">
      <param name="component">
</param>
    </member>
    <member name="M:Speck.Core.Task.Work">
    </member>
    <member name="M:Speck.Core.Task.OnBehaviorFinished(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="P:Speck.Core.Task.BehaviorDependencys">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Speck.Core.Task.Status">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Speck.Core.Task.ProcessRate">
      <summary>
Indicates the finished ratio of the operation,100 indicates 100% of completion and 0 indicates no work has been done.</summary>
    </member>
    <member name="P:Speck.Core.Task.TaskPriority">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="M:Speck.Core.IPlugable.PlugIn">
    </member>
    <member name="M:Speck.Core.IPlugable.PlugOff">
    </member>
    <member name="T:Speck.Core.Component">
    </member>
    <member name="M:Speck.Core.Component.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Speck.Core.Component">Component</see> class.</summary>
    </member>
    <member name="M:Speck.Core.Component.Add(Speck.Core.Component)">
      <param name="component">
</param>
    </member>
    <member name="M:Speck.Core.Component.DoWork">
    </member>
    <member name="M:Speck.Core.Component.Initialize">
    </member>
    <member name="M:Speck.Core.Component.Remove(Speck.Core.Component)">
      <param name="component">
</param>
    </member>
    <member name="M:Speck.Core.Component.Work">
    </member>
    <member name="T:Speck.Core.XMLTaskProvider">
    </member>
    <member name="M:Speck.Core.XMLTaskProvider.#ctor(System.String)">
      <summary>
Initializes a new instance of the <see cref="T:Speck.Core.XMLTaskProvider">XMLTaskProvider</see> class.</summary>
      <param name="uri">
</param>
    </member>
    <member name="M:Speck.Core.XMLTaskProvider.Initialize">
    </member>
    <member name="M:Speck.Core.XMLTaskProvider.GetTasks">
    </member>
    <member name="M:Speck.Core.XMLTaskProvider.BuildBehaviorEntity(System.Xml.XPath.XPathNavigator)">
      <param name="behaviorEntityNavigator">
</param>
    </member>
    <member name="M:Speck.Core.XMLTaskProvider.Dispose">
      <summary>
Releases all resources used by the. <see cref="T:Speck.Core.XMLTaskProvider">XMLTaskProvider</see>.</summary>
    </member>
    <member name="M:Speck.Core.XMLTaskProvider.Dispose(System.Boolean)">
      <summary>
Releases the unmanaged resources used by the <see cref="T:Speck.Core.XMLTaskProvider">XMLTaskProvider</see> and optionally releases the managed resources.</summary>
      <param name="disposing">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:Speck.Core.ITaskProvider.GetTasks">
    </member>
    <member name="T:Speck.Core.EntityEventArgs">
    </member>
    <member name="M:Speck.Core.EntityEventArgs.#ctor(Speck.Core.Component)">
      <summary>
Initializes a new instance of the <see cref="T:Speck.Core.EntityEventArgs">EntityEventArgs</see> class.</summary>
      <param name="entity">
</param>
    </member>
    <member name="P:Speck.Core.EntityEventArgs.Entity">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="T:Speck.Core.BehaviorEventArgs">
    </member>
    <member name="M:Speck.Core.BehaviorEventArgs.#ctor(Speck.Core.Behavior)">
      <summary>
Initializes a new instance of the <see cref="T:Speck.Core.BehaviorEventArgs">BehaviorEventArgs</see> class.</summary>
      <param name="behavior">
</param>
    </member>
    <member name="P:Speck.Core.BehaviorEventArgs.Behavior">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="T:Speck.Core.PlugEventArgs">
    </member>
    <member name="P:Speck.Core.PlugEventArgs.PluggedObject">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="T:Speck.Core.TaskExecuteEventArgs">
    </member>
    <member name="M:Speck.Core.TaskExecuteEventArgs.#ctor(Speck.Core.Task)">
      <summary>
Initializes a new instance of the <see cref="T:Speck.Core.TaskExecuteEventArgs">TaskExecuteEventArgs</see> class.</summary>
      <param name="currentTask">
</param>
    </member>
    <member name="P:Speck.Core.TaskExecuteEventArgs.CurrentTask">
      <summary>
Gets .</summary>
    </member>
    <member name="T:Speck.Core.BehaviorException">
    </member>
    <member name="M:Speck.Core.BehaviorException.#ctor(Speck.Core.Behavior)">
      <summary>
Initializes a new instance of the <see cref="T:Speck.Core.BehaviorException">BehaviorException</see> class.</summary>
      <param name="behavior">
</param>
    </member>
    <member name="M:Speck.Core.BehaviorException.#ctor(Speck.Core.Behavior,System.String)">
      <summary>
Initializes a new instance of the <see cref="T:Speck.Core.BehaviorException">BehaviorException</see> class.</summary>
      <param name="behavior">
</param>
      <param name="message">
</param>
    </member>
    <member name="P:Speck.Core.BehaviorException.Behavior">
      <summary>
Gets .</summary>
    </member>
    <member name="T:Speck.Core.Behavior">
    </member>
    <member name="M:Speck.Core.Behavior.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Speck.Core.Behavior">Behavior</see> class.</summary>
    </member>
    <member name="M:Speck.Core.Behavior.Abort">
    </member>
    <member name="M:Speck.Core.Behavior.ExecuteAsynchronously">
    </member>
    <member name="M:Speck.Core.Behavior.ExecuteSynchronously">
    </member>
    <member name="M:Speck.Core.Behavior.OnAborted">
    </member>
    <member name="M:Speck.Core.Behavior.OnBeforeStart">
    </member>
    <member name="M:Speck.Core.Behavior.OnClose">
    </member>
    <member name="M:Speck.Core.Behavior.OnPaused">
      <summary>
Rewrite to provide the behavior of customization</summary>
    </member>
    <member name="M:Speck.Core.Behavior.OnResumed">
    </member>
    <member name="M:Speck.Core.Behavior.Pause">
    </member>
    <member name="M:Speck.Core.Behavior.Resume">
    </member>
    <member name="M:Speck.Core.Behavior.Start(Speck.Core.BehaviorExecutePattern)">
      <summary>
Starts the behavior with the specified synchronization pattern.</summary>
      <param name="synchronizationPattern">
The synchronization pattern.</param>
    </member>
    <member name="M:Speck.Core.Behavior.Start">
      <summary>
Starts work synchronously.</summary>
    </member>
    <member name="E:Speck.Core.Behavior.BeforeStart">
      <summary>
Occurs when .</summary>
    </member>
    <member name="E:Speck.Core.Behavior.Paused">
      <summary>
Occurs when .</summary>
    </member>
    <member name="E:Speck.Core.Behavior.Resumed">
      <summary>
Occurs when .</summary>
    </member>
    <member name="E:Speck.Core.Behavior.Aborted">
      <summary>
Occurs when .</summary>
    </member>
    <member name="E:Speck.Core.Behavior.Close">
      <summary>
Occurs when .</summary>
    </member>
    <member name="E:Speck.Core.Behavior.EntityAdded">
      <summary>
Occurs when .</summary>
    </member>
    <member name="E:Speck.Core.Behavior.EntityRemoved">
      <summary>
Occurs when .</summary>
    </member>
    <member name="M:Speck.Core.Behavior.Add(Speck.Core.Component)">
      <param name="component">
</param>
    </member>
    <member name="M:Speck.Core.Behavior.DoWork">
      <summary>
Does the work. Need to be override to provide the context meaning functionality if you want the work to get done, finally you should set the mIsWorkFinished = true here OR do your logic but not forget to set the flag or you will be hang here</summary>
    </member>
    <member name="M:Speck.Core.Behavior.Initialize">
    </member>
    <member name="M:Speck.Core.Behavior.Remove(Speck.Core.Component)">
      <param name="component">
</param>
    </member>
    <member name="M:Speck.Core.Behavior.Work">
    </member>
    <member name="M:Speck.Core.Behavior.Dispose">
    </member>
    <member name="M:Speck.Core.Behavior.Dispose(System.Boolean)">
      <summary>
Releases the unmanaged resources used by the <see cref="T:Speck.Core.Behavior">Behavior</see> and optionally releases the managed resources.</summary>
      <param name="disposing">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:Speck.Core.Behavior.InsertEntity(Speck.Core.Component,Speck.Core.BehaviorEntityType)">
      <param name="entity">
</param>
      <param name="entityType">
</param>
    </member>
    <member name="M:Speck.Core.Behavior.InsertEntity(Speck.Core.Component)">
      <param name="entity">
</param>
    </member>
    <member name="M:Speck.Core.Behavior.RemoveEntity(Speck.Core.Component)">
      <param name="entity">
</param>
    </member>
    <member name="M:Speck.Core.Behavior.OnEntityAdded(Speck.Core.Component)">
      <param name="addedEntity">
</param>
    </member>
    <member name="M:Speck.Core.Behavior.OnEntityRemoved(Speck.Core.Component)">
      <param name="entity">
</param>
    </member>
    <member name="P:Speck.Core.Behavior.PlannedWorkPattern">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:Speck.Core.Behavior.BehaviorEntities">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Speck.Core.Behavior.ProcessRate">
      <summary>
Indicate the finished ratio of the operation,100 indicates 100% of completion and 0 indicates no work has been done</summary>
    </member>
    <member name="P:Speck.Core.Behavior.DependendentBehaviors">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:Speck.Core.Behavior.IsWorkFinished">
      <summary>
Gets a value indicating whether this instance .</summary>
    </member>
    <member name="P:Speck.Core.Behavior.Status">
      <summary>
Gets .</summary>
    </member>
    <member name="T:Speck.Core.TaskExcuteProcess">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.CloseLog">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.DoWork">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.Initialize">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.OnWorkFinished">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.OnWorkStart">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.PollStatus">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.StartLog">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.StartWork">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.Stop">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.Pool">
      <summary>
Pools this instance. Usef to pool execute engine status</summary>
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.Update">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.GetHighestRankTask">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.Dispose">
    </member>
    <member name="M:Speck.Core.TaskExcuteProcess.Dispose(System.Boolean)">
      <summary>
Releases the unmanaged resources used by the <see cref="T:Speck.Core.TaskExcuteProcess">TaskExcuteProcess</see> and optionally releases the managed resources.</summary>
      <param name="disposing">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="E:Speck.Core.TaskExcuteProcess.WorkStart">
      <summary>
Occurs when .</summary>
    </member>
    <member name="E:Speck.Core.TaskExcuteProcess.WorkFinished">
      <summary>
Occurs when .</summary>
    </member>
    <member name="P:Speck.Core.TaskExcuteProcess.Instance">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Speck.Core.TaskExcuteProcess.NeedPoolTerminated">
      <summary>
Gets or sets a value indicating whether .</summary>
    </member>
    <member name="P:Speck.Core.TaskExcuteProcess.NeedWorkTerminated">
      <summary>
Gets or sets a value indicating whether .</summary>
    </member>
  </members>
</doc>
